import { Box, Dialog, DialogTitle, Grid, Typography } from "@mui/material";
import { Product } from "database";
import Head from "next/head";
import { useState } from "react";
import AddProductForm from "../components/AddProductForm";
import { apiClient } from "../components/api";
import ProductList from "../components/ProductList";
import { BuyResult } from "../types";

export default function Products() {
  const [products, setProducts] = useState<Product[]>([]);
  const [showResult, setShowResult] = useState(false);
  const [buyResult, setBuyResult] = useState<BuyResult>();
  return (
    <>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main>
        <Grid justifyContent="center" container spacing={2}>
          <Grid padding={0} md={4} justifyContent="center" sm={12}>
            <AddProductForm
              onAdd={async () => {
                setProducts((await apiClient.get("/products")).data);
              }}
            />
          </Grid>
          <Grid md={8} sm={12}>
            <ProductList
              onBuy={async (buyResult: BuyResult) => {
                setBuyResult(buyResult);
                setShowResult(true);
                setProducts((await apiClient.get("/products")).data);
              }}
              products={products}
              setProducts={setProducts}
            />
          </Grid>
        </Grid>
        <Dialog open={showResult} onClose={() => setShowResult(false)}>
          <DialogTitle>
            you bought {buyResult?.product.productName}!
          </DialogTitle>

          {buyResult && (
            <Box p={3}>
              <Typography>
                change: [
                {buyResult.change.map((r, index) => (
                  <span>{`${r}${
                    index === buyResult.change.length - 1 ? "" : ", "
                  }`}</span>
                ))}
                ]
              </Typography>
              <Typography>total spent: {buyResult.totalSpent / 100}</Typography>
            </Box>
          )}
        </Dialog>
      </main>
    </>
  );
}
